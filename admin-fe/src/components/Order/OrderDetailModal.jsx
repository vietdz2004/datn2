import React, { useState, useEffect } from "react";
import styles from "./OrderDetailModal.module.css";
import OrderInfoBlock from "./OrderInfoBlock";
import OrderProductTable from "./OrderProductTable";
import OrderActionPanel from "./OrderActionPanel";

// ===== STATUS MANAGEMENT - H·ªÜ TH·ªêNG TR·∫†NG TH√ÅI M·ªöI =====
const STATUS_FLOW = {
  // ===== H·ªÜ TH·ªêNG M·ªöI =====
  pending: ["confirmed", "cancelled"],
  confirmed: ["shipping", "cancelled"],
  shipping: ["delivered", "cancelled"],
  delivered: [],
  cancelled: [],
  
  // ===== H·ªÜ TH·ªêNG C≈® (LEGACY) - ƒê√öNG THEO LOGIC BACKEND =====
  cho_xu_ly: ["da_xac_nhan", "confirmed", "huy_boi_admin", "cancelled"],
  da_xac_nhan: ["dang_chuan_bi", "dang_giao", "shipping", "huy_boi_admin", "cancelled"],
  dang_chuan_bi: ["dang_giao", "shipping", "huy_boi_admin", "cancelled"],
  dang_giao: ["da_giao", "delivered", "khach_bom_hang", "cancelled"],
  da_giao: [],
  huy_boi_khach: [],
  huy_boi_admin: [],
  khach_bom_hang: []
};

const STATUS_LABELS = {
  // ===== TR·∫†NG TH√ÅI M·ªöI - CHU·∫®N H√ìA =====
  'pending': 'Ch·ªù x·ª≠ l√Ω',
  'confirmed': 'ƒê√£ x√°c nh·∫≠n',
  'shipping': 'ƒêang giao h√†ng',
  'delivered': 'ƒê√£ giao h√†ng',
  'cancelled': 'ƒê√£ h·ªßy',
  
  // Payment status
  'unpaid': 'Ch∆∞a thanh to√°n',
  'pending_payment': 'ƒêang x·ª≠ l√Ω thanh to√°n',
  'paid': 'ƒê√£ thanh to√°n',
  'failed': 'Thanh to√°n th·∫•t b·∫°i',
  'refunded': 'ƒê√£ ho√†n ti·ªÅn',
  
  // ===== LEGACY SUPPORT =====
  'cho_xu_ly': 'Ch·ªù x·ª≠ l√Ω',
  'da_xac_nhan': 'ƒê√£ x√°c nh·∫≠n',
  'dang_chuan_bi': 'ƒêang chu·∫©n b·ªã',
  'dang_giao': 'ƒêang giao h√†ng',
  'da_giao': 'ƒê√£ giao h√†ng',
  'huy_boi_khach': 'Kh√°ch h·ªßy',
  'huy_boi_admin': 'Admin h·ªßy',
  'khach_bom_hang': 'Kh√°ch bom h√†ng'
};

export default function OrderDetailModal({ 
  open, 
  onClose, 
  order, 
  onStatusChange, 
  onApproveCancellation, 
  onRejectCancellation 
}) {
  const [newStatus, setNewStatus] = useState(order?.trangThaiDonHang || "");
  const [actionLoading, setActionLoading] = useState(false);
  const [error, setError] = useState("");
  const [reason, setReason] = useState("");

  useEffect(() => {
    setNewStatus(order?.trangThaiDonHang || "");
    setReason("");
    setError("");
  }, [order]);

  if (!open || !order) return null;

  // L·∫•y danh s√°ch tr·∫°ng th√°i c√≥ th·ªÉ chuy·ªÉn ƒë·∫øn
  const getAllowedStatuses = (currentStatus) => {
    return STATUS_FLOW[currentStatus] || [];
  };

  const allowedStatuses = getAllowedStatuses(order.trangThaiDonHang);

  const handleStatusUpdate = async () => {
    console.log('üîÑ handleStatusUpdate called with:', { newStatus, reason: reason.trim() });
    if (!onStatusChange) return setError("‚ùå Ch∆∞a truy·ªÅn logic c·∫≠p nh·∫≠t tr·∫°ng th√°i!");
    
    // Ki·ªÉm tra l√Ω do cho tr·∫°ng th√°i h·ªßy
    if (newStatus === 'cancelled' && !reason.trim()) {
      return setError("‚ùå Vui l√≤ng nh·∫≠p l√Ω do h·ªßy ƒë∆°n h√†ng!");
    }

    setActionLoading(true);
    setError("");
    
    try {
      console.log('üîÑ Calling onStatusChange with:', order.id_DonHang, newStatus, reason.trim());
      await onStatusChange(order.id_DonHang, newStatus, reason.trim());
      console.log('‚úÖ onStatusChange completed successfully');
      setError("");
      onClose();
    } catch (e) {
      console.error('‚ùå onStatusChange error:', e);
      setError(e?.message || "‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i");
    } finally {
      setActionLoading(false);
    }
  };

  const handleApprove = async () => {
    if (!onApproveCancellation) return setError("‚ùå Ch∆∞a truy·ªÅn logic duy·ªát h·ªßy!");
    setActionLoading(true);
    setError("");
    try {
      await onApproveCancellation(order.id_DonHang);
      setError("");
      onClose();
    } catch (e) {
      setError(e?.message || "‚ùå L·ªói duy·ªát h·ªßy");
    } finally {
      setActionLoading(false);
    }
  };
  
  const handleReject = async () => {
    if (!onRejectCancellation) return setError("‚ùå Ch∆∞a truy·ªÅn logic t·ª´ ch·ªëi h·ªßy!");
    setActionLoading(true);
    setError("");
    try {
      await onRejectCancellation(order.id_DonHang);
      setError("");
      onClose();
    } catch (e) {
      setError(e?.message || "L·ªói t·ª´ ch·ªëi h·ªßy");
    } finally {
      setActionLoading(false);
    }
  };

  return (
    <div className={styles["order-modal-backdrop"]}>
      <div className={styles["order-modal-content"]}>
        <button className={styles["order-modal-close"]} onClick={onClose}>√ó</button>
        <h2 className={styles["order-modal-title"]}>Chi ti·∫øt ƒë∆°n h√†ng #{order.id_DonHang}</h2>
        <OrderInfoBlock order={order} />
        <div className={styles["order-modal-products"]}>
          <div className={styles["order-modal-products-title"]}>S·∫£n ph·∫©m:</div>
          <OrderProductTable products={order.OrderDetails || order.sanPham || order.products || []} />
        </div>
        <OrderActionPanel
          newStatus={newStatus}
          setNewStatus={setNewStatus}
          actionLoading={actionLoading}
          onStatusUpdate={handleStatusUpdate}
          onApprove={handleApprove}
          onReject={handleReject}
          error={error}
          trangThaiDonHang={order.trangThaiDonHang}
          allowedStatuses={allowedStatuses}
          reason={reason}
          setReason={setReason}
        />
      </div>
    </div>
  );
} 