const { sequelize } = require('./models/database');

async function createRealisticOrderStatuses() {
  try {
    console.log('üéØ T·∫°o d·ªØ li·ªáu tr·∫°ng th√°i ƒë∆°n h√†ng th·ª±c t·∫ø...');

    // L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng
    const orders = await sequelize.query(`
      SELECT id_DonHang, trangThaiThanhToan, phuongThucThanhToan, ngayDatHang
      FROM donhang 
      ORDER BY ngayDatHang DESC
    `, { type: sequelize.QueryTypes.SELECT });

    console.log(`üì¶ T·ªïng s·ªë ƒë∆°n h√†ng: ${orders.length}`);

    let updates = [];

    // Ph√¢n b·ªï tr·∫°ng th√°i theo logic th·ª±c t·∫ø
    orders.forEach((order, index) => {
      let newStatus = 'cho_xu_ly'; // m·∫∑c ƒë·ªãnh

      // Logic ph√¢n b·ªï tr·∫°ng th√°i d·ª±a tr√™n:
      // 1. Tr·∫°ng th√°i thanh to√°n
      // 2. Th·ª© t·ª± th·ªùi gian (ƒë∆°n c≈© h∆°n c√≥ th·ªÉ ƒë√£ ho√†n th√†nh)
      
      if (order.trangThaiThanhToan === 'paid') {
        // ƒê∆°n ƒë√£ thanh to√°n
        if (index < 20) {
          newStatus = Math.random() > 0.7 ? 'da_giao' : 'dang_giao';
        } else if (index < 50) {
          newStatus = Math.random() > 0.5 ? 'dang_giao' : 'da_xac_nhan';
        } else {
          newStatus = 'da_xac_nhan';
        }
      } else if (order.trangThaiThanhToan === 'failed' || order.trangThaiThanhToan === 'REFUND_SUCCESS') {
        // ƒê∆°n thanh to√°n th·∫•t b·∫°i ho·∫∑c ƒë√£ ho√†n ti·ªÅn
        newStatus = Math.random() > 0.3 ? 'huy_boi_admin' : 'huy_boi_khach';
      } else if (order.trangThaiThanhToan === 'unpaid' || order.trangThaiThanhToan === 'PENDING') {
        // ƒê∆°n ch∆∞a thanh to√°n
        if (order.phuongThucThanhToan === 'COD') {
          // COD c√≥ th·ªÉ ti·∫øn tri·ªÉn b√¨nh th∆∞·ªùng
          if (index < 30) {
            newStatus = Math.random() > 0.6 ? 'da_giao' : 'dang_giao';
          } else if (index < 80) {
            newStatus = Math.random() > 0.4 ? 'dang_giao' : 'da_xac_nhan';
          } else {
            newStatus = 'cho_xu_ly';
          }
        } else {
          // Online ch∆∞a thanh to√°n th√¨ ch·ªù x·ª≠ l√Ω
          newStatus = 'cho_xu_ly';
        }
      }

      updates.push({ id: order.id_DonHang, status: newStatus });
    });

    // Th·ª±c hi·ªán c·∫≠p nh·∫≠t
    console.log('\nüîÑ ƒêang c·∫≠p nh·∫≠t tr·∫°ng th√°i...');
    for (const update of updates) {
      await sequelize.query(`
        UPDATE donhang 
        SET trangThaiDonHang = ? 
        WHERE id_DonHang = ?
      `, { 
        replacements: [update.status, update.id],
        type: sequelize.QueryTypes.UPDATE 
      });
    }

    // Ki·ªÉm tra k·∫øt qu·∫£
    console.log('\nüìä Ph√¢n b·ªï tr·∫°ng th√°i sau c·∫≠p nh·∫≠t:');
    const statusStats = await sequelize.query(`
      SELECT trangThaiDonHang, COUNT(*) as count 
      FROM donhang 
      GROUP BY trangThaiDonHang 
      ORDER BY count DESC
    `, { type: sequelize.QueryTypes.SELECT });
    
    statusStats.forEach(row => {
      console.log(`${row.trangThaiDonHang}: ${row.count} ƒë∆°n`);
    });

    // Hi·ªÉn th·ªã m·∫´u ƒë∆°n h√†ng v·ªõi tr·∫°ng th√°i ƒëa d·∫°ng
    console.log('\nüìã M·∫´u ƒë∆°n h√†ng v·ªõi tr·∫°ng th√°i ƒëa d·∫°ng:');
    const sampleOrders = await sequelize.query(`
      SELECT id_DonHang, maDonHang, trangThaiDonHang, trangThaiThanhToan, phuongThucThanhToan
      FROM donhang 
      ORDER BY ngayDatHang DESC 
      LIMIT 10
    `, { type: sequelize.QueryTypes.SELECT });
    
    sampleOrders.forEach(order => {
      console.log(`ID: ${order.id_DonHang} | Tr·∫°ng th√°i: "${order.trangThaiDonHang}" | Thanh to√°n: "${order.trangThaiThanhToan}" | PT: "${order.phuongThucThanhToan}"`);
    });

    console.log('\nüéâ Ho√†n th√†nh t·∫°o d·ªØ li·ªáu th·ª±c t·∫ø!');
    process.exit(0);

  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

createRealisticOrderStatuses();
