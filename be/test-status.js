const { sequelize } = require('./models/database');

async function testStatusUpdate() {
  try {
    console.log('üß™ Test c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng...\n');

    // Ki·ªÉm tra th·ªëng k√™ tr·∫°ng th√°i
    const stats = await sequelize.query(`
      SELECT trangThaiDonHang, COUNT(*) as count 
      FROM donhang 
      GROUP BY trangThaiDonHang 
      ORDER BY count DESC
    `, { type: sequelize.QueryTypes.SELECT });
    
    console.log('üìä Th·ªëng k√™ tr·∫°ng th√°i ƒë∆°n h√†ng:');
    stats.forEach(stat => {
      console.log(`${stat.trangThaiDonHang}: ${stat.count} ƒë∆°n`);
    });

    // T√¨m ƒë∆°n h√†ng cho test
    const choXuLy = await sequelize.query(`
      SELECT id_DonHang, trangThaiDonHang, trangThaiThanhToan, phuongThucThanhToan
      FROM donhang 
      WHERE trangThaiDonHang = 'cho_xu_ly' 
      LIMIT 3
    `, { type: sequelize.QueryTypes.SELECT });
    
    console.log('\nüìã ƒê∆°n h√†ng ch·ªù x·ª≠ l√Ω:');
    choXuLy.forEach(order => {
      console.log(`ID: ${order.id_DonHang} | Tr·∫°ng th√°i: ${order.trangThaiDonHang} | Thanh to√°n: ${order.trangThaiThanhToan} | PT: ${order.phuongThucThanhToan}`);
    });

    if (choXuLy.length > 0) {
      const testOrder = choXuLy[0];
      console.log(`\nüîÑ S·∫Ω test c·∫≠p nh·∫≠t ƒë∆°n h√†ng ID: ${testOrder.id_DonHang}`);
      console.log(`Tr·∫°ng th√°i hi·ªán t·∫°i: ${testOrder.trangThaiDonHang}`);
      console.log('C√≥ th·ªÉ chuy·ªÉn sang: da_xac_nhan, confirmed, huy_boi_admin, cancelled');
    }

    process.exit(0);
  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
    process.exit(1);
  }
}

testStatusUpdate();
