// Test t·ª± ƒë·ªông API voucher (ch·∫°y: node test-voucher-api.js)
const axios = require('axios');
const API_URL = 'http://localhost:3000/admin/vouchers'; // S·ª≠a l·∫°i n·∫øu port kh√°c


async function runTests() {
  const today = new Date();
  const tomorrow = new Date(today.getTime() + 24*60*60*1000);
  const yesterday = new Date(today.getTime() - 24*60*60*1000);
  const format = d => d.toISOString().slice(0,10);

  // Helper
  async function createVoucher(data, expectSuccess = true, note = '') {
    try {
      const res = await axios.post(API_URL, data);
      if (expectSuccess) {
        console.log(`‚úÖ [PASS] ${note}`);
        return res.data.data;
      } else {
        console.log(`‚ùå [FAIL] ${note} (expected error, got success)`);
      }
    } catch (err) {
      if (!expectSuccess) {
        console.log(`‚úÖ [PASS] ${note} (error: ${err.response?.data?.message || err.message})`);
      } else {
        console.log(`‚ùå [FAIL] ${note} (error: ${err.response?.data?.message || err.message})`);
      }
    }
    return null;
  }

  // 1. Th√™m voucher lo·∫°i fixed
  const v1 = await createVoucher({
    maVoucher: 'TEST_FIXED',
    loaiVoucher: 'fixed',
    giaTriGiam: 50000,
    dieuKienApDung: '',
    soLuong: 10,
    trangThai: 'active',
    ngayBatDau: format(today),
    ngayHetHan: format(tomorrow),
    moTa: 'Test fixed voucher'
  }, true, 'Th√™m voucher fixed');

  // 2. Th√™m voucher lo·∫°i percentage
  const v2 = await createVoucher({
    maVoucher: 'TEST_PERCENT',
    loaiVoucher: 'percentage',
    giaTriGiam: 20,
    dieuKienApDung: '',
    soLuong: 5,
    trangThai: 'active',
    ngayBatDau: format(today),
    ngayHetHan: format(tomorrow),
    moTa: 'Test percent voucher'
  }, true, 'Th√™m voucher percentage');

  // 3. Th√™m voucher tr·∫°ng th√°i inactive
  await createVoucher({
    maVoucher: 'TEST_INACTIVE',
    loaiVoucher: 'fixed',
    giaTriGiam: 10000,
    dieuKienApDung: '',
    soLuong: 2,
    trangThai: 'inactive',
    ngayBatDau: format(today),
    ngayHetHan: format(tomorrow),
    moTa: 'Inactive voucher'
  }, true, 'Th√™m voucher tr·∫°ng th√°i inactive');

  // 4. Th√™m voucher tr·∫°ng th√°i expired
  await createVoucher({
    maVoucher: 'TEST_EXPIRED',
    loaiVoucher: 'fixed',
    giaTriGiam: 10000,
    dieuKienApDung: '',
    soLuong: 2,
    trangThai: 'expired',
    ngayBatDau: format(yesterday),
    ngayHetHan: format(today),
    moTa: 'Expired voucher'
  }, true, 'Th√™m voucher tr·∫°ng th√°i expired');

  // 5. Ng√†y b·∫Øt ƒë·∫ßu > ng√†y k·∫øt th√∫c (ph·∫£i b√°o l·ªói)
  await createVoucher({
    maVoucher: 'TEST_DATE_ERR',
    loaiVoucher: 'fixed',
    giaTriGiam: 10000,
    dieuKienApDung: '',
    soLuong: 2,
    trangThai: 'active',
    ngayBatDau: format(tomorrow),
    ngayHetHan: format(today),
    moTa: 'Date error'
  }, false, 'Th√™m voucher v·ªõi ng√†y b·∫Øt ƒë·∫ßu > ng√†y k·∫øt th√∫c');

  // 6. S·ªë l∆∞·ª£ng < 1 (ph·∫£i b√°o l·ªói)
  await createVoucher({
    maVoucher: 'TEST_SOLUONG_ERR',
    loaiVoucher: 'fixed',
    giaTriGiam: 10000,
    dieuKienApDung: '',
    soLuong: 0,
    trangThai: 'active',
    ngayBatDau: format(today),
    ngayHetHan: format(tomorrow),
    moTa: 'S·ªë l∆∞·ª£ng l·ªói'
  }, false, 'Th√™m voucher v·ªõi s·ªë l∆∞·ª£ng < 1');

  // 7. M√£ ƒë√£ t·ªìn t·∫°i (ph·∫£i b√°o l·ªói tr√πng m√£)
  await createVoucher({
    maVoucher: 'TEST_FIXED',
    loaiVoucher: 'fixed',
    giaTriGiam: 10000,
    dieuKienApDung: '',
    soLuong: 1,
    trangThai: 'active',
    ngayBatDau: format(today),
    ngayHetHan: format(tomorrow),
    moTa: 'Duplicate code'
  }, false, 'Th√™m voucher v·ªõi m√£ ƒë√£ t·ªìn t·∫°i');

  // 8. Gi√° tr·ªã gi·∫£m > 100% (ph·∫£i b√°o l·ªói n·∫øu l√† percentage)
  await createVoucher({
    maVoucher: 'TEST_PERCENT_ERR',
    loaiVoucher: 'percentage',
    giaTriGiam: 150,
    dieuKienApDung: '',
    soLuong: 1,
    trangThai: 'active',
    ngayBatDau: format(today),
    ngayHetHan: format(tomorrow),
    moTa: 'Percent > 100%'
  }, false, 'Th√™m voucher v·ªõi gi√° tr·ªã gi·∫£m > 100% (percentage)');

  // 9. L·ªói enum: lo·∫°i voucher kh√¥ng h·ª£p l·ªá
  await createVoucher({
    maVoucher: 'TEST_ENUM_ERR',
    loaiVoucher: 'abc',
    giaTriGiam: 10000,
    dieuKienApDung: '',
    soLuong: 1,
    trangThai: 'active',
    ngayBatDau: format(today),
    ngayHetHan: format(tomorrow),
    moTa: 'Enum error'
  }, false, 'Th√™m voucher v·ªõi lo·∫°i voucher kh√¥ng h·ª£p l·ªá');

  // 10. L·ªói enum: tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá
  await createVoucher({
    maVoucher: 'TEST_ENUM_ERR2',
    loaiVoucher: 'fixed',
    giaTriGiam: 10000,
    dieuKienApDung: '',
    soLuong: 1,
    trangThai: 'abc',
    ngayBatDau: format(today),
    ngayHetHan: format(tomorrow),
    moTa: 'Enum error 2'
  }, false, 'Th√™m voucher v·ªõi tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá');

  // 11. L·ªói s·ªë: gi√° tr·ªã gi·∫£m <= 0
  await createVoucher({
    maVoucher: 'TEST_GIATRI_ERR',
    loaiVoucher: 'fixed',
    giaTriGiam: 0,
    dieuKienApDung: '',
    soLuong: 1,
    trangThai: 'active',
    ngayBatDau: format(today),
    ngayHetHan: format(tomorrow),
    moTa: 'Gi√° tr·ªã gi·∫£m l·ªói'
  }, false, 'Th√™m voucher v·ªõi gi√° tr·ªã gi·∫£m <= 0');

  console.log('üéØ ƒê√£ ch·∫°y xong c√°c test case th√™m voucher. H√£y ki·ªÉm tra l·∫°i danh s√°ch voucher tr√™n giao di·ªán ƒë·ªÉ x√°c nh·∫≠n hi·ªÉn th·ªã!');
}

runTests(); 