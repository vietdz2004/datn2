import React, { useState } from "react";
import { Link, useNavigate, useLocation } from "react-router-dom";
import {
  Box,
  Typography,
  TextField,
  Button,
  Alert,
  Container,
  Paper,
  Divider,
} from "@mui/material";
import { Visibility, VisibilityOff, Email, Lock } from "@mui/icons-material";
import { InputAdornment, IconButton } from "@mui/material";
import { useAuth } from "../contexts/AuthContext";
import GoogleLoginButton from "../components/GoogleLoginButton";
import styles from "./LoginPage.module.scss";

const LoginPage = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { login, googleLogin, loading } = useAuth();

  const [formData, setFormData] = useState({
    email: "",
    password: "",
  });
  const [errors, setErrors] = useState({});
  const [showPassword, setShowPassword] = useState(false);
  const [apiError, setApiError] = useState("");
  const [success, setSuccess] = useState("");

  // Get redirect path and message from location state
  const returnUrl = location.state?.returnUrl || "/";
  const authMessage = location.state?.message;

  // Handle input changes
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));

    // Clear error when user starts typing
    if (errors[name]) {
      setErrors((prev) => ({
        ...prev,
        [name]: "",
      }));
    }
  };

  // Validate form
  const validateForm = () => {
    const newErrors = {};

    if (!formData.email) {
      newErrors.email = "Email l√† b·∫Øt bu·ªôc";
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = "Email kh√¥ng h·ª£p l·ªá";
    }

    if (!formData.password) {
      newErrors.password = "M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc";
    } else if (formData.password.length < 6) {
      newErrors.password = "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Handle form submit
  const handleSubmit = async (e) => {
    e.preventDefault();
    setApiError("");
    setSuccess("");

    if (!validateForm()) {
      return;
    }

    try {
      // Map frontend field to backend field
      const loginData = {
        email: formData.email,
        matKhau: formData.password, // Transform password -> matKhau for backend
      };

      console.log("üìä Sending login data to backend:", {
        email: loginData.email,
        matKhau: "***",
      });

      const result = await login(loginData);

      if (result.success) {
        setSuccess("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");
        setTimeout(() => {
          navigate(returnUrl, { replace: true });
        }, 1000);
      } else {
        setApiError(result.message);
      }
    } catch (error) {
      console.error("Login error:", error);
      setApiError("C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  const handleGoogleSuccess = async (idToken) => {
    try {
      const result = await googleLogin(idToken);

      if (result.success) {
        setSuccess("ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng!");
        setTimeout(() => {
          navigate(returnUrl, { replace: true });
        }, 1000);
      } else {
        setApiError(result.message);
      }
    } catch (error) {
      console.error("Google login error:", error);
      setApiError("C√≥ l·ªói x·∫£y ra khi ƒëƒÉng nh·∫≠p Google");
    }
  };

  const handleGoogleError = (error) => {
    setApiError(error);
  };

  return (
    <Box className={styles.loginContainer}>
      {/* Main Content */}
      <Box className={styles.mainContent}>
        {/* Left Column - Kh√°ch h√†ng m·ªõi */}
        <Box className={styles.leftColumn}>
          <Typography className={styles.sectionTitle}>
            ƒêƒÉng k√Ω t√†i kho·∫£n
          </Typography>
          <Typography className={styles.sectionDescription}>
            B·∫±ng c√°ch t·∫°o t√†i kho·∫£n, b·∫°n s·∫Ω c√≥ th·ªÉ mua s·∫Øm nhanh h∆°n, c·∫≠p nh·∫≠t
            tr·∫°ng th√°i ƒë∆°n h√†ng v√† theo d√µi c√°c ƒë∆°n h√†ng b·∫°n ƒë√£ th·ª±c hi·ªán tr∆∞·ªõc
            ƒë√≥.
          </Typography>
          <Button
            className={styles.continueButton}
            onClick={() => navigate("/register")}
          >
            Ti·∫øp t·ª•c
          </Button>
        </Box>

        {/* Right Column - Form ƒëƒÉng nh·∫≠p */}
        <Box className={styles.rightColumn}>
          <Typography className={styles.formTitle}>
            Ph·∫ßn h·ªìi kh√°ch h√†ng
          </Typography>
          <Typography className={styles.formSubtitle}>
            T√¥i l√† m·ªôt kh√°ch h√†ng c≈©
          </Typography>

          {authMessage && (
            <Alert severity="info" className={styles.alert}>
              {authMessage}
            </Alert>
          )}

          {apiError && (
            <Alert severity="error" className={styles.alert}>
              {apiError}
            </Alert>
          )}

          {success && (
            <Alert severity="success" className={styles.alert}>
              {success}
            </Alert>
          )}

          <Box component="form" onSubmit={handleSubmit} className={styles.form}>
            <TextField
              fullWidth
              name="email"
              type="email"
              label="ƒê·ªãa ch·ªâ email"
              value={formData.email}
              onChange={handleChange}
              error={!!errors.email}
              helperText={errors.email}
              disabled={loading}
              required
              autoComplete="email"
              className={styles.textField}
            />

            <TextField
              fullWidth
              name="password"
              type={showPassword ? "text" : "password"}
              label="M·∫≠t kh·∫©u"
              value={formData.password}
              onChange={handleChange}
              error={!!errors.password}
              helperText={errors.password}
              disabled={loading}
              required
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton
                      onClick={() => setShowPassword(!showPassword)}
                      edge="end"
                    >
                      {showPassword ? <VisibilityOff /> : <Visibility />}
                    </IconButton>
                  </InputAdornment>
                ),
              }}
              className={styles.textField}
            />

            <Link to="/forgot-password" className={styles.forgotPassword}>
              ƒê√£ qu√™n m·∫≠t kh·∫©u
            </Link>

            <Button
              type="submit"
              variant="contained"
              disabled={loading}
              className={styles.submitButton}
            >
              {loading ? "ƒêang ƒëƒÉng nh·∫≠p..." : "ƒêƒÉng nh·∫≠p"}
            </Button>

            <Divider sx={{ my: 2 }}>ho·∫∑c</Divider>

            <GoogleLoginButton
              onSuccess={handleGoogleSuccess}
              onError={handleGoogleError}
              disabled={loading}
            />
          </Box>
        </Box>
      </Box>

      {/* Sidebar */}
      <Box className={styles.sidebar}>
        <Typography className={styles.sidebarTitle}>T√†i kho·∫£n</Typography>
        <Link to="/login" className={styles.sidebarLink}>
          ƒêƒÉng nh·∫≠p
        </Link>
        <Link to="/register" className={styles.sidebarLink}>
          ƒêƒÉng k√Ω
        </Link>
        <Link to="/forgot-password" className={styles.sidebarLink}>
          ƒê√£ qu√™n m·∫≠t kh·∫©u
        </Link>
        <Link to="/profile" className={styles.sidebarLink}>
          T√†i kho·∫£n c·ªßa t√¥i
        </Link>
        <Link to="/orders" className={styles.sidebarLink}>
          L·ªãch s·ª≠ ƒë∆°n h√†ng
        </Link>
      </Box>
    </Box>
  );
};

export default LoginPage;
