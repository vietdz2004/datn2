import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { 
  Box, Typography, TextField, Button, Alert, Container, Paper,
  FormControlLabel, Checkbox, Grid
} from '@mui/material';
import { 
  Visibility, VisibilityOff, Email, Lock, Person, Phone
} from '@mui/icons-material';
import { InputAdornment, IconButton } from '@mui/material';
import { useAuth } from '../contexts/AuthContext';
import styles from './RegisterPage.module.scss';

const RegisterPage = () => {
  const navigate = useNavigate();
  const { register, loading } = useAuth();
  
  const [formData, setFormData] = useState({
    hoTen: '',
    email: '',
    soDienThoai: '',
    password: '',
    agreeToTerms: false
  });
  const [errors, setErrors] = useState({});
  const [showPassword, setShowPassword] = useState(false);
  const [apiError, setApiError] = useState('');
  const [success, setSuccess] = useState('');

  // Handle input changes
  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  // Validate form
  const validateForm = () => {
    const newErrors = {};

    // Validate name
    if (!formData.hoTen.trim()) {
      newErrors.hoTen = 'H·ªç t√™n l√† b·∫Øt bu·ªôc';
    } else if (formData.hoTen.trim().length < 2) {
      newErrors.hoTen = 'H·ªç t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±';
    }

    // Validate email
    if (!formData.email) {
      newErrors.email = 'Email l√† b·∫Øt bu·ªôc';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Email kh√¥ng h·ª£p l·ªá';
    }

    // Validate phone
    if (!formData.soDienThoai) {
      newErrors.soDienThoai = 'S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc';
    } else if (!/^[0-9]{10,11}$/.test(formData.soDienThoai)) {
      newErrors.soDienThoai = 'S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10-11 ch·ªØ s·ªë';
    }

    // Validate password
    if (!formData.password) {
      newErrors.password = 'M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc';
    } else if (formData.password.length < 6) {
      newErrors.password = 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±';
    }



    // Validate terms agreement
    if (!formData.agreeToTerms) {
      newErrors.agreeToTerms = 'B·∫°n ph·∫£i ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n s·ª≠ d·ª•ng';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Handle form submit
  const handleSubmit = async (e) => {
    e.preventDefault();
    setApiError('');
    setSuccess('');

    if (!validateForm()) {
      return;
    }

    try {
      const { password, ...otherData } = formData;
      
      // Map frontend field to backend field
      const registerData = {
        ...otherData,
        matKhau: password  // Transform password -> matKhau for backend
      };
      
      console.log('üìä Sending to backend:', registerData);
      
      const result = await register(registerData);
      
      if (result.success) {
        setSuccess('ƒêƒÉng k√Ω th√†nh c√¥ng! ƒêang chuy·ªÉn h∆∞·ªõng...');
        setTimeout(() => {
          navigate('/', { replace: true });
        }, 1500);
      } else {
        setApiError(result.message);
      }
    } catch {
      setApiError('C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  return (
    <Box className={styles.registerContainer}>
      {/* Banner */}
      <Box className={styles.banner}>
        ƒê·∫∂T HOA ONLINE - GIAO MI·ªÑN PH√ç TP HCM & H√Ä N·ªòI - G·ªåI NGAY 1234 123 123 HO·∫∂C 4312 160 123
      </Box>
      
      {/* Main Content */}
      <Box className={styles.mainContent}>
        {/* Form ƒëƒÉng k√Ω - Full width */}
        <Box className={styles.registerFormColumn}>
          <Typography className={styles.pageTitle}>
            ƒêƒÉng k√Ω t√†i kho·∫£n
          </Typography>
          <Typography className={styles.pageDescription}>
            N·∫øu b·∫°n ƒë√£ c√≥ t√†i kho·∫£n v·ªõi ch√∫ng t√¥i, vui l√≤ng ƒëƒÉng nh·∫≠p t·∫°i <Link to="/login" className={styles.link}>trang ƒëƒÉng nh·∫≠p</Link> .
          </Typography>
          
          <Typography className={styles.formTitle}>
            Th√¥ng tin c√° nh√¢n c·ªßa b·∫°n
          </Typography>

          {apiError && (
            <Alert severity="error" className={styles.alert}>
              {apiError}
            </Alert>
          )}

          {success && (
            <Alert severity="success" className={styles.alert}>
              {success}
            </Alert>
          )}

          <Box component="form" onSubmit={handleSubmit} className={styles.form}>
            <Box className={styles.formRow}>
              <Typography className={styles.fieldLabel}>
                <span className={styles.required}>*</span> H·ªç t√™n
              </Typography>
              <TextField
                name="hoTen"
                placeholder="H·ªç t√™n"
                value={formData.hoTen}
                onChange={handleChange}
                error={!!errors.hoTen}
                disabled={loading}
                required
                className={styles.textField}
                InputLabelProps={{ shrink: false }}
              />
            </Box>
            {errors.hoTen && (
              <Typography variant="body2" color="error" className={styles.errorText}>
                {errors.hoTen}
              </Typography>
            )}

            <Box className={styles.formRow}>
              <Typography className={styles.fieldLabel}>
                <span className={styles.required}>*</span> E-mail
              </Typography>
              <TextField
                name="email"
                type="email"
                placeholder="E-mail"
                value={formData.email}
                onChange={handleChange}
                error={!!errors.email}
                disabled={loading}
                required
                className={styles.textField}
                InputLabelProps={{ shrink: false }}
              />
            </Box>
            {errors.email && (
              <Typography variant="body2" color="error" className={styles.errorText}>
                {errors.email}
              </Typography>
            )}

            <Box className={styles.formRow}>
              <Typography className={styles.fieldLabel}>
                <span className={styles.required}>*</span> ƒêi·ªán tho·∫°i
              </Typography>
              <TextField
                name="soDienThoai"
                placeholder="ƒêi·ªán tho·∫°i"
                value={formData.soDienThoai}
                onChange={handleChange}
                error={!!errors.soDienThoai}
                disabled={loading}
                required
                className={styles.textField}
                InputLabelProps={{ shrink: false }}
              />
            </Box>
            {errors.soDienThoai && (
              <Typography variant="body2" color="error" className={styles.errorText}>
                {errors.soDienThoai}
              </Typography>
            )}

            <Typography className={styles.formTitle} style={{ marginTop: '30px' }}>
              M·∫≠t kh·∫©u c·ªßa b·∫°n
            </Typography>

            <Box className={styles.formRow}>
              <Typography className={styles.fieldLabel}>
                <span className={styles.required}>*</span> M·∫≠t kh·∫©u
              </Typography>
              <TextField
                name="password"
                type={showPassword ? 'text' : 'password'}
                placeholder="M·∫≠t kh·∫©u"
                value={formData.password}
                onChange={handleChange}
                error={!!errors.password}
                disabled={loading}
                required
                InputProps={{
                  endAdornment: (
                    <InputAdornment position="end">
                      <IconButton
                        onClick={() => setShowPassword(!showPassword)}
                        edge="end"
                      >
                        {showPassword ? <VisibilityOff /> : <Visibility />}
                      </IconButton>
                    </InputAdornment>
                  ),
                }}
                className={styles.textField}
                InputLabelProps={{ shrink: false }}
              />
            </Box>
            {errors.password && (
              <Typography variant="body2" color="error" className={styles.errorText}>
                {errors.password}
              </Typography>
            )}



            <FormControlLabel
              control={
                <Checkbox
                  name="agreeToTerms"
                  checked={formData.agreeToTerms}
                  onChange={handleChange}
                  color="primary"
                />
              }
              label={
                <Typography variant="body2">
                  T√¥i ƒë√£ ƒë·ªçc v√† ƒë·ªìng √Ω v·ªõi <Link to="/terms" className={styles.link}>ƒêi·ªÅu kho·∫£n</Link> & <Link to="/privacy" className={styles.link}>ƒêi·ªÅu ki·ªán</Link>
                </Typography>
              }
              className={styles.checkbox}
            />
            {errors.agreeToTerms && (
              <Typography variant="body2" color="error" className={styles.errorText}>
                {errors.agreeToTerms}
              </Typography>
            )}

            <Button
              type="submit"
              variant="contained"
              disabled={loading}
              className={styles.submitButton}
            >
              {loading ? 'ƒêang ƒëƒÉng k√Ω...' : 'Ti·∫øp t·ª•c'}
            </Button>
          </Box>
        </Box>

        {/* Sidebar */}
        <Box className={styles.sidebar}>
          <Typography className={styles.sidebarTitle}>
            T√†i kho·∫£n
          </Typography>
          <Link to="/login" className={styles.sidebarLink}>
            ƒêƒÉng nh·∫≠p
          </Link>
          <Link to="/register" className={styles.sidebarLink}>
            ƒêƒÉng k√Ω
          </Link>
          <Link to="/forgot-password" className={styles.sidebarLink}>
            ƒê√£ qu√™n m·∫≠t kh·∫©u
          </Link>
          <Link to="/profile" className={styles.sidebarLink}>
            T√†i kho·∫£n c·ªßa t√¥i
          </Link>
          <Link to="/orders" className={styles.sidebarLink}>
            L·ªãch s·ª≠ ƒë∆°n h√†ng
          </Link>
        </Box>
      </Box>
    </Box>
  );
};

export default RegisterPage; 