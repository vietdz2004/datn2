import React, { useState, useContext, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Stepper, Step, StepLabel, Button, Typography, Box, Paper, TextField, RadioGroup, FormControlLabel, Radio, CircularProgress, Divider } from '@mui/material';
import { CartContext } from '../contexts/CartContext';
import AuthContext from '../contexts/AuthContext';
import VoucherInput from '../components/VoucherInput';
import api from '../services/api';

const steps = ['Th√¥ng tin kh√°ch h√†ng', 'ƒê·ªãa ch·ªâ giao h√†ng', 'Ph∆∞∆°ng th·ª©c thanh to√°n', 'X√°c nh·∫≠n ƒë∆°n h√†ng'];

const initialCustomerInfo = {
  name: '',
  phone: '',
  email: '',
};
const initialShipping = {
  address: '',
  note: '',
};

const CheckoutPage = () => {
  const { cartItems, totalAmount, clearCart, voucher, applyVoucher, removeVoucher } = useContext(CartContext);
  const { user } = useContext(AuthContext);
  const navigate = useNavigate();

  const [activeStep, setActiveStep] = useState(0);
  const [customerInfo, setCustomerInfo] = useState(initialCustomerInfo);
  const [shipping, setShipping] = useState(initialShipping);
  const [paymentMethod, setPaymentMethod] = useState('COD');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // Load user info when component mounts or user changes
  useEffect(() => {
    if (user) {
      setCustomerInfo({
        name: user.hoTen || user.ten || '',
        phone: user.soDienThoai || '',
        email: user.email || '',
      });
      setShipping({
        address: user.diaChi || '',
        note: '',
      });
    }
  }, [user]);

  // T√≠nh to√°n t·ªïng ti·ªÅn cu·ªëi c√πng
  const finalTotal = voucher ? voucher.calculation.finalTotal : totalAmount;

  // X·ª≠ l√Ω khi voucher ƒë∆∞·ª£c √°p d·ª•ng
  const handleVoucherApplied = (voucherData) => {
    applyVoucher(voucherData);
  };

  // X·ª≠ l√Ω khi voucher b·ªã x√≥a
  const handleVoucherRemoved = () => {
    removeVoucher();
  };

  // Validate t·ª´ng b∆∞·ªõc
  const validateStep = () => {
    if (activeStep === 0) {
      if (!customerInfo.name || !customerInfo.phone) return 'Vui l√≤ng nh·∫≠p h·ªç t√™n v√† s·ªë ƒëi·ªán tho·∫°i.';
    }
    if (activeStep === 1) {
      if (!shipping.address) return 'Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng.';
    }
    if (activeStep === 2) {
      if (!paymentMethod) return 'Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n.';
    }
    if (activeStep === 3) {
      if (
        !customerInfo.name?.trim() || customerInfo.name.trim().length < 2 ||
        !customerInfo.phone?.trim() || customerInfo.phone.trim().length < 8 ||
        !shipping.address?.trim() || shipping.address.trim().length < 5 ||
        !paymentMethod?.trim()
      ) {
        return 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß v√† h·ª£p l·ªá h·ªç t√™n (t·ªëi thi·ªÉu 2 k√Ω t·ª±), s·ªë ƒëi·ªán tho·∫°i (t·ªëi thi·ªÉu 8 s·ªë), ƒë·ªãa ch·ªâ giao h√†ng (t·ªëi thi·ªÉu 5 k√Ω t·ª±), ph∆∞∆°ng th·ª©c thanh to√°n!';
      }
      if (
        !cartItems ||
        !Array.isArray(cartItems) ||
        cartItems.length === 0 ||
        !cartItems.every(item => item.id_SanPham && ((item.soLuong || item.quantity) && item.gia))
      ) {
        return 'Gi·ªè h√†ng tr·ªëng ho·∫∑c kh√¥ng h·ª£p l·ªá';
      }
    }
    return '';
  };

  const handleNext = async () => {
    setError('');
    const err = validateStep();
    if (err) {
      setError(err);
      return;
    }
    if (activeStep === steps.length - 1) {
      // ƒê·∫∑t h√†ng
      setLoading(true);
      try {
        // Format cartItems data ƒë·ªÉ match backend expectation
        const formattedCartItems = cartItems.map(item => ({
          id_SanPham: item.id_SanPham,
          soLuongMua: item.quantity || item.soLuong || 1, // S·ª≠a t·ª´ soLuong th√†nh soLuongMua
          gia: item.giaKhuyenMai || item.gia,
          giaTaiThoiDiem: item.giaKhuyenMai || item.gia,
          tenSp: item.tenSp || 'S·∫£n ph·∫©m'
        }));

        console.log('üì¶ Creating order with data:', {
          hoTen: customerInfo.name,
          soDienThoai: customerInfo.phone,
          email: customerInfo.email,
          diaChiGiao: shipping.address,
          ghiChu: shipping.note,
          phuongThucThanhToan: paymentMethod,
          sanPham: formattedCartItems,
          tongThanhToan: finalTotal,
          id_NguoiDung: user?.id_NguoiDung,
          maVoucher: voucher?.voucher?.maVoucher
        });

        // 1. T·∫°o ƒë∆°n h√†ng
        const orderRes = await api.post('/orders', {
          hoTen: customerInfo.name,
          soDienThoai: customerInfo.phone,
          email: customerInfo.email,
          diaChiGiao: shipping.address,
          ghiChu: shipping.note,
          phuongThucThanhToan: paymentMethod,
          sanPham: formattedCartItems,
          tongThanhToan: finalTotal,
          id_NguoiDung: user?.id_NguoiDung,
          maVoucher: voucher?.voucher?.maVoucher
        });
        
        if (!orderRes.data?.success) {
          throw new Error('API kh√¥ng tr·∫£ v·ªÅ success=true: ' + JSON.stringify(orderRes.data));
        }
        
        if (!orderRes.data?.data?.id_DonHang) {
          throw new Error('API kh√¥ng tr·∫£ v·ªÅ id_DonHang: ' + JSON.stringify(orderRes.data));
        }
        
        const order = orderRes.data.data;
        console.log('‚úÖ Order created with ID:', order.id_DonHang);
        
        // 2. X·ª≠ l√Ω thanh to√°n theo ph∆∞∆°ng th·ª©c ƒë√£ ch·ªçn
        if (paymentMethod === 'VNPay') {
          await handleVNPayPayment(order, finalTotal);
        } else if (paymentMethod === 'ZaloPay') {
          await handleZaloPayPayment(order, finalTotal);
        } else {
          // 3. Thanh to√°n COD: chuy·ªÉn sang trang th√†nh c√¥ng
          console.log('‚úÖ COD order completed, clearing cart and redirecting...');
          clearCart();
          navigate(`/order-success/${order.id_DonHang}`);
        }
      } catch (e) {
        console.error('‚ùå Checkout error:', e);
        
        // X·ª≠ l√Ω l·ªói chi ti·∫øt h∆°n
        let errorMessage = 'C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t h√†ng.';
        
        if (e.response?.data) {
          const errorData = e.response.data;
          
          if (errorData.message) {
            errorMessage = errorData.message;
          }
          
          // X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p l·ªói c·ª• th·ªÉ
          if (errorData.missingFields) {
            const missingFields = Object.keys(errorData.missingFields).filter(field => errorData.missingFields[field]);
            if (missingFields.length > 0) {
              errorMessage = `Thi·∫øu th√¥ng tin: ${missingFields.join(', ')}`;
            }
          }
          
          if (errorData.invalidItem) {
            errorMessage += ` - S·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá: ${JSON.stringify(errorData.invalidItem)}`;
          }
          
          console.log('üìã Error details:', errorData);
        } else if (e.message) {
          errorMessage = e.message;
        }
        
        setError(errorMessage);
      } finally {
        setLoading(false);
      }
    } else {
      setActiveStep((prev) => prev + 1);
    }
  };

  // X·ª≠ l√Ω thanh to√°n VNPay
  const handleVNPayPayment = async (order, amount) => {
    console.log('üí≥ Creating VNPay payment with amount:', amount);
    const payRes = await api.post('/payment/create_payment_url', {
      amount: amount,
      orderId: order.id_DonHang,
      orderDesc: `Thanh to√°n ƒë∆°n h√†ng #${order.id_DonHang} - HoaShop`,
    });
    
    const paymentData = payRes.data;
    if (paymentData?.success && paymentData?.paymentUrl) {
      console.log('üöÄ Redirecting to VNPay:', paymentData.paymentUrl);
      window.location.href = paymentData.paymentUrl;
    } else {
      throw new Error('VNPay kh√¥ng tr·∫£ v·ªÅ payment URL: ' + JSON.stringify(paymentData));
    }
  };

  // X·ª≠ l√Ω thanh to√°n ZaloPay
  const handleZaloPayPayment = async (order, amount) => {
    console.log('üí≥ Creating ZaloPay payment with amount:', amount);
    const payRes = await api.post('/payment/create_zalopay_order', {
      amount: amount,
      orderId: order.id_DonHang,
      orderDesc: `Thanh to√°n ƒë∆°n h√†ng #${order.id_DonHang} - HoaShop`,
    });
    
    const paymentData = payRes.data;
    if (paymentData?.success && paymentData?.order_url) {
      console.log('üöÄ Redirecting to ZaloPay:', paymentData.order_url);
      window.location.href = paymentData.order_url;
    } else {
      throw new Error('ZaloPay kh√¥ng tr·∫£ v·ªÅ payment URL: ' + JSON.stringify(paymentData));
    }
  };

  const handleBack = () => {
    setActiveStep((prev) => prev - 1);
  };

  // Render t·ª´ng b∆∞·ªõc
  const renderStepContent = (step) => {
    switch (step) {
      case 0:
        return (
          <Box>
            <Typography variant="h6" sx={{ mb: 2 }}>Th√¥ng tin kh√°ch h√†ng</Typography>
            <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
              {user ? 'Th√¥ng tin ƒë∆∞·ª£c t·ª± ƒë·ªông ƒëi·ªÅn t·ª´ t√†i kho·∫£n c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a n·∫øu c·∫ßn.' : 'Vui l√≤ng nh·∫≠p th√¥ng tin c·ªßa b·∫°n.'}
            </Typography>
            <TextField 
              label="H·ªç t√™n" 
              fullWidth 
              margin="normal" 
              value={customerInfo.name} 
              onChange={e => setCustomerInfo({ ...customerInfo, name: e.target.value })}
              placeholder="Nh·∫≠p h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß"
              required
            />
            <TextField 
              label="S·ªë ƒëi·ªán tho·∫°i" 
              fullWidth 
              margin="normal" 
              value={customerInfo.phone} 
              onChange={e => setCustomerInfo({ ...customerInfo, phone: e.target.value })}
              placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
              required
            />
            <TextField 
              label="Email" 
              fullWidth 
              margin="normal" 
              type="email"
              value={customerInfo.email} 
              onChange={e => setCustomerInfo({ ...customerInfo, email: e.target.value })}
              placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email"
            />
          </Box>
        );
      case 1:
        return (
          <Box>
            <Typography variant="h6" sx={{ mb: 2 }}>ƒê·ªãa ch·ªâ giao h√†ng</Typography>
            <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
              {user?.diaChi ? 'ƒê·ªãa ch·ªâ ƒë∆∞·ª£c t·ª± ƒë·ªông ƒëi·ªÅn t·ª´ t√†i kho·∫£n c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a n·∫øu c·∫ßn.' : 'Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng.'}
            </Typography>
            <TextField 
              label="ƒê·ªãa ch·ªâ giao h√†ng" 
              fullWidth 
              margin="normal" 
              value={shipping.address} 
              onChange={e => setShipping({ ...shipping, address: e.target.value })}
              placeholder="S·ªë nh√†, t√™n ƒë∆∞·ªùng, ph∆∞·ªùng/x√£, qu·∫≠n/huy·ªán, t·ªânh/th√†nh ph·ªë"
              multiline
              rows={3}
              required
            />
            <TextField 
              label="Ghi ch√∫ (t√πy ch·ªçn)" 
              fullWidth 
              margin="normal" 
              value={shipping.note} 
              onChange={e => setShipping({ ...shipping, note: e.target.value })}
              placeholder="Ghi ch√∫ th√™m cho ng∆∞·ªùi giao h√†ng (n·∫øu c√≥)"
              multiline
              rows={2}
            />
          </Box>
        );
      case 2:
        return (
          <Box>
            <Typography variant="h6" sx={{ mb: 2 }}>Ph∆∞∆°ng th·ª©c thanh to√°n</Typography>
            <RadioGroup value={paymentMethod} onChange={e => setPaymentMethod(e.target.value)}>
              <FormControlLabel value="COD" control={<Radio />} label="Thanh to√°n khi nh·∫≠n h√†ng (COD)" />
              <FormControlLabel value="VNPay" control={<Radio />} label="Thanh to√°n qua VNPay (ATM, QR, th·∫ª qu·ªëc t·∫ø)" />
              <FormControlLabel value="ZaloPay" control={<Radio />} label="Thanh to√°n qua ZaloPay (V√≠ ƒëi·ªán t·ª≠, th·∫ª ATM)" />
            </RadioGroup>
          </Box>
        );
      case 3:
        return (
          <Box>
            <Typography variant="h6" sx={{ mb: 2 }}>X√°c nh·∫≠n ƒë∆°n h√†ng</Typography>
            
            <Box sx={{ mb: 2 }}>
              <Typography variant="subtitle1" sx={{ fontWeight: 'bold', mb: 1 }}>Th√¥ng tin kh√°ch h√†ng</Typography>
              <Typography>H·ªç t√™n: {customerInfo.name}</Typography>
              <Typography>S·ªë ƒëi·ªán tho·∫°i: {customerInfo.phone}</Typography>
              <Typography>Email: {customerInfo.email || 'Kh√¥ng c√≥'}</Typography>
            </Box>

            <Box sx={{ mb: 2 }}>
              <Typography variant="subtitle1" sx={{ fontWeight: 'bold', mb: 1 }}>ƒê·ªãa ch·ªâ giao h√†ng</Typography>
              <Typography>ƒê·ªãa ch·ªâ: {shipping.address}</Typography>
              {shipping.note && <Typography>Ghi ch√∫: {shipping.note}</Typography>}
            </Box>

            <Box sx={{ mb: 2 }}>
              <Typography variant="subtitle1" sx={{ fontWeight: 'bold', mb: 1 }}>Ph∆∞∆°ng th·ª©c thanh to√°n</Typography>
              <Typography>{
                paymentMethod === 'VNPay' ? 'VNPay (ATM, QR, th·∫ª qu·ªëc t·∫ø)' : 
                paymentMethod === 'ZaloPay' ? 'ZaloPay (V√≠ ƒëi·ªán t·ª≠, th·∫ª ATM)' : 
                'Thanh to√°n khi nh·∫≠n h√†ng (COD)'
              }</Typography>
            </Box>

            <Divider sx={{ my: 2 }} />

            <Box sx={{ mb: 2 }}>
              <Typography variant="subtitle1" sx={{ fontWeight: 'bold', mb: 1 }}>T·ªïng quan ƒë∆°n h√†ng</Typography>
              <Typography>S·ªë s·∫£n ph·∫©m: {cartItems.length}</Typography>
              <Typography>T·ªïng ti·ªÅn h√†ng: {totalAmount.toLocaleString('vi-VN')}‚Ç´</Typography>
              
              {/* Voucher input ·ªü b∆∞·ªõc x√°c nh·∫≠n */}
              <Box sx={{ my: 2 }}>
                <VoucherInput
                  onVoucherApplied={handleVoucherApplied}
                  onVoucherRemoved={handleVoucherRemoved}
                  orderTotal={totalAmount}
                  appliedVoucher={voucher}
                  userId={user?.id_NguoiDung}
                  productIds={cartItems.map(item => item.id_SanPham)}
                />
              </Box>
              
              {voucher && (
                <>
                  <Typography color="success.main">
                    Gi·∫£m gi√°: -{voucher.calculation.discountAmount.toLocaleString('vi-VN')}‚Ç´
                  </Typography>
                  <Typography variant="h6" color="primary" sx={{ fontWeight: 'bold' }}>
                    T·ªïng thanh to√°n: {finalTotal.toLocaleString('vi-VN')}‚Ç´
                  </Typography>
                </>
              )}
              
              {!voucher && (
                <Typography variant="h6" color="primary" sx={{ fontWeight: 'bold' }}>
                  T·ªïng thanh to√°n: {finalTotal.toLocaleString('vi-VN')}‚Ç´
                </Typography>
              )}
            </Box>
          </Box>
        );
      default:
        return null;
    }
  };

  return (
    <Paper sx={{ maxWidth: 600, margin: '32px auto', p: 3 }}>
      <Stepper activeStep={activeStep} alternativeLabel>
        {steps.map(label => (
          <Step key={label}>
            <StepLabel>{label}</StepLabel>
          </Step>
        ))}
      </Stepper>
      <Box mt={3} mb={2}>{renderStepContent(activeStep)}</Box>
      {error && <Typography color="error" sx={{ mt: 2 }}>{error}</Typography>}
      <Box display="flex" justifyContent="space-between" alignItems="center" sx={{ mt: 3 }}>
        <Button disabled={activeStep === 0 || loading} onClick={handleBack}>Quay l·∫°i</Button>
        <Button variant="contained" color="primary" onClick={handleNext} disabled={loading}>
          {loading ? <CircularProgress size={24} /> : (activeStep === steps.length - 1 ? 'ƒê·∫∑t h√†ng' : 'Ti·∫øp t·ª•c')}
        </Button>
      </Box>
    </Paper>
  );
};

export default CheckoutPage; 