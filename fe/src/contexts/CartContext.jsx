import React, { createContext, useContext, useReducer, useEffect, useState, useCallback } from 'react';
import { cartAPI } from '../services/api';
import { useAuth } from './AuthContext';

// ============================================
// CART CONTEXT - Qu·∫£n l√Ω gi·ªè h√†ng to√†n c·ª•c
// ============================================

const CartContext = createContext();

// C√°c h√†nh ƒë·ªông c√≥ th·ªÉ th·ª±c hi·ªán v·ªõi gi·ªè h√†ng
const CART_ACTIONS = {
  ADD_ITEM: 'ADD_ITEM',           // Th√™m s·∫£n ph·∫©m v√†o gi·ªè
  REMOVE_ITEM: 'REMOVE_ITEM',     // X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè
  UPDATE_QUANTITY: 'UPDATE_QUANTITY', // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
  CLEAR_CART: 'CLEAR_CART',       // X√≥a to√†n b·ªô gi·ªè h√†ng
  LOAD_CART: 'LOAD_CART',         // T·∫£i gi·ªè h√†ng t·ª´ DB/localStorage
  SET_LOADING: 'SET_LOADING',     // C·∫≠p nh·∫≠t tr·∫°ng th√°i loading
  SET_VOUCHER: 'SET_VOUCHER',     // √Åp d·ª•ng voucher
  REMOVE_VOUCHER: 'REMOVE_VOUCHER' // X√≥a voucher
};

// ============================================
// CART REDUCER - X·ª≠ l√Ω logic c·∫≠p nh·∫≠t state
// ============================================
const cartReducer = (state, action) => {
  switch (action.type) {
    case CART_ACTIONS.SET_LOADING:
      return { ...state, loading: action.payload };

    case CART_ACTIONS.ADD_ITEM: {
      const { product, quantity = 1 } = action.payload;
      const existingItem = state.items.find(item => item.id_SanPham === product.id_SanPham);
      
      if (existingItem) {
        // N·∫øu s·∫£n ph·∫©m ƒë√£ c√≥, tƒÉng s·ªë l∆∞·ª£ng
        return {
          ...state,
          items: state.items.map(item =>
            item.id_SanPham === product.id_SanPham
              ? { ...item, quantity: item.quantity + quantity, soLuong: item.quantity + quantity }
              : item
          )
        };
      } else {
        // Th√™m s·∫£n ph·∫©m m·ªõi v√†o gi·ªè
        const cartItem = {
          id_SanPham: product.id_SanPham,
          tenSp: product.tenSp,
          gia: product.gia,
          giaKhuyenMai: product.giaKhuyenMai,
          hinhAnh: product.hinhAnh,
          quantity: quantity,
          soLuong: quantity,
          thuongHieu: product.thuongHieu || ''
        };
        
        return { ...state, items: [...state.items, cartItem] };
      }
    }

    case CART_ACTIONS.REMOVE_ITEM:
      return {
        ...state,
        items: state.items.filter(item => item.id_SanPham !== action.payload.productId)
      };

    case CART_ACTIONS.UPDATE_QUANTITY: {
      const { productId, quantity } = action.payload;
      
      // N·∫øu s·ªë l∆∞·ª£ng <= 0, x√≥a s·∫£n ph·∫©m
      if (quantity <= 0) {
        return {
          ...state,
          items: state.items.filter(item => item.id_SanPham !== productId)
        };
      }
      
      // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng m·ªõi
      return {
        ...state,
        items: state.items.map(item =>
          item.id_SanPham === productId
            ? { ...item, quantity, soLuong: quantity }
            : item
        )
      };
    }

    case CART_ACTIONS.CLEAR_CART:
      return { ...state, items: [], voucher: null };

    case CART_ACTIONS.LOAD_CART:
      return { ...state, items: action.payload.items || [] };

    case CART_ACTIONS.SET_VOUCHER:
      return { ...state, voucher: action.payload.voucher };

    case CART_ACTIONS.REMOVE_VOUCHER:
      return { ...state, voucher: null };

    default:
      return state;
  }
};

// State ban ƒë·∫ßu c·ªßa gi·ªè h√†ng
const initialState = {
  items: [],
  loading: false,
  voucher: null
};

// ============================================
// CART PROVIDER - Component cung c·∫•p context
// ============================================
export const CartProvider = ({ children }) => {
  const [state, dispatch] = useReducer(cartReducer, initialState);
  const { user, loading: authLoading } = useAuth();
  const [isInitialized, setIsInitialized] = useState(false);
  const [currentUserId, setCurrentUserId] = useState(null);

  // ============================================
  // C√ÅC HELPER FUNCTIONS - H√†m ti·ªán √≠ch (th·ª© t·ª± ƒë√∫ng)
  // ============================================

  // T·∫£i gi·ªè h√†ng t·ª´ localStorage cho guest user (ƒë·ªãnh nghƒ©a tr∆∞·ªõc)
  const loadCartFromLocalStorage = useCallback(() => {
    try {
      const savedCart = localStorage.getItem('hoashop_cart');
      if (savedCart) {
        const cartData = JSON.parse(savedCart);
        dispatch({
          type: CART_ACTIONS.LOAD_CART,
          payload: { items: cartData.items || [] }
        });
        console.log('‚úÖ T·∫£i gi·ªè h√†ng t·ª´ localStorage th√†nh c√¥ng:', cartData.items?.length || 0, 'items');
      }
    } catch (error) {
      console.error('‚ùå L·ªói t·∫£i gi·ªè h√†ng t·ª´ localStorage:', error);
    }
  }, []);

  // T·∫£i gi·ªè h√†ng t·ª´ database cho user ƒë√£ ƒëƒÉng nh·∫≠p (ƒë·ªãnh nghƒ©a sau)
  const loadCartFromDatabase = useCallback(async (userId) => {
    if (!userId) return;
    
    try {
      dispatch({ type: CART_ACTIONS.SET_LOADING, payload: true });
      const response = await cartAPI.get();
      
      if (response.data.success) {
        // Backend tr·∫£ v·ªÅ format: { success: true, data: { items: [...], totalItems, totalAmount } }
        const cartItems = response.data.data?.items || [];
        dispatch({
          type: CART_ACTIONS.LOAD_CART,
          payload: { items: cartItems }
        });
        console.log('‚úÖ T·∫£i gi·ªè h√†ng t·ª´ database th√†nh c√¥ng:', cartItems.length, 'items');
      }
    } catch (error) {
      console.error('‚ùå L·ªói t·∫£i gi·ªè h√†ng t·ª´ database:', error);
      // N·∫øu user ch∆∞a ƒëƒÉng nh·∫≠p, fallback v·ªÅ localStorage
      if (error.message?.includes('must be logged in')) {
        console.log('üîÑ Fallback to localStorage cart...');
        loadCartFromLocalStorage();
      }
    } finally {
      dispatch({ type: CART_ACTIONS.SET_LOADING, payload: false });
    }
  }, [loadCartFromLocalStorage]);

  // L∆∞u gi·ªè h√†ng v√†o localStorage (ch·ªâ cho guest user)
  const saveCartToLocalStorage = useCallback(() => {
    try {
      localStorage.setItem('hoashop_cart', JSON.stringify(state));
    } catch (error) {
      console.error('‚ùå L·ªói l∆∞u gi·ªè h√†ng v√†o localStorage:', error);
    }
  }, [state]);

  // ƒê·ªìng b·ªô gi·ªè h√†ng t·ª´ localStorage l√™n database khi user ƒëƒÉng nh·∫≠p
  const syncLocalStorageToDatabase = useCallback(async (userId, localItems) => {
    if (!userId || !localItems.length) return;

    try {
      console.log('üîÑ Syncing', localItems.length, 'items from localStorage to database...');
      await cartAPI.sync(localItems);
      localStorage.removeItem('hoashop_cart'); // X√≥a localStorage sau khi sync th√†nh c√¥ng
      console.log('‚úÖ Cart sync completed successfully');
    } catch (error) {
      console.error('‚ùå L·ªói ƒë·ªìng b·ªô gi·ªè h√†ng l√™n database:', error);
    }
  }, []);

  // ============================================
  // EFFECTS - X·ª≠ l√Ω side effects
  // ============================================

  // Kh·ªüi t·∫°o gi·ªè h√†ng khi user thay ƒë·ªïi (login/logout)
  useEffect(() => {
    // ‚ö†Ô∏è CH·ªú AUTH LOADING HO√ÄN TH√ÄNH TR∆Ø·ªöC KHI KH·ªûI T·∫†O CART
    if (authLoading) {
      console.log('‚è≥ Waiting for auth to complete...');
      return;
    }

    const initializeCart = async () => {
      const newUserId = user?.id_NguoiDung;
      
      console.log('üöÄ Initializing cart for user:', newUserId || 'guest');
      
      // B·ªè qua n·∫øu c√πng user ho·∫∑c ch∆∞a kh·ªüi t·∫°o
      if (currentUserId === newUserId && isInitialized) {
        console.log('‚è≠Ô∏è Skipping cart initialization - same user');
        return;
      }
      
      setCurrentUserId(newUserId);
      
      if (newUserId) {
        // User ƒë√£ ƒëƒÉng nh·∫≠p
        console.log('üë§ User logged in - loading cart from database...');
        const localCart = localStorage.getItem('hoashop_cart');
        let localItems = [];
        
        try {
          if (localCart) {
            const cartData = JSON.parse(localCart);
            localItems = cartData.items || [];
          }
        } catch (error) {
          console.error('‚ùå L·ªói parse localStorage cart:', error);
        }
        
        // ƒê·ªìng b·ªô localStorage n·∫øu c√≥ items
        if (localItems.length > 0) {
          await syncLocalStorageToDatabase(newUserId, localItems);
        }
        
        // T·∫£i gi·ªè h√†ng t·ª´ database
        await loadCartFromDatabase(newUserId);
        
      } else {
        // User ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c ƒë√£ logout
        console.log('üë§ Guest user - loading cart from localStorage...');
        dispatch({ type: CART_ACTIONS.CLEAR_CART });
        loadCartFromLocalStorage();
      }
      
      if (!isInitialized) {
        setIsInitialized(true);
        console.log('‚úÖ Cart initialization completed');
      }
    };

    initializeCart();
  }, [authLoading, user?.id_NguoiDung, loadCartFromDatabase, loadCartFromLocalStorage, 
      syncLocalStorageToDatabase, currentUserId, isInitialized]);

  // L∆∞u v√†o localStorage khi gi·ªè h√†ng thay ƒë·ªïi (ch·ªâ cho guest user)
  useEffect(() => {
    if (isInitialized && !authLoading && !user?.id_NguoiDung) {
      saveCartToLocalStorage();
    }
  }, [state, user?.id_NguoiDung, isInitialized, authLoading, saveCartToLocalStorage]);

  // ============================================
  // CART ACTIONS - C√°c h√†nh ƒë·ªông v·ªõi gi·ªè h√†ng
  // ============================================

  // Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
  const addToCart = async (product, quantity = 1) => {
    if (user?.id_NguoiDung) {
      // User ƒë√£ ƒëƒÉng nh·∫≠p - l∆∞u v√†o database
      try {
        await cartAPI.add(product.id_SanPham, quantity);
        await loadCartFromDatabase(user.id_NguoiDung);
      } catch (error) {
        console.error('‚ùå L·ªói th√™m v√†o gi·ªè h√†ng:', error);
        // Fallback v·ªÅ local state
        dispatch({ type: CART_ACTIONS.ADD_ITEM, payload: { product, quantity } });
      }
    } else {
      // Guest user - c·∫≠p nh·∫≠t local state
      dispatch({ type: CART_ACTIONS.ADD_ITEM, payload: { product, quantity } });
    }
  };

  // X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
  const removeFromCart = async (productId) => {
    if (user?.id_NguoiDung) {
      try {
        await cartAPI.remove(productId);
        dispatch({ type: CART_ACTIONS.REMOVE_ITEM, payload: { productId } });
      } catch (error) {
        console.error('‚ùå L·ªói x√≥a kh·ªèi gi·ªè h√†ng:', error);
        dispatch({ type: CART_ACTIONS.REMOVE_ITEM, payload: { productId } });
      }
    } else {
      dispatch({ type: CART_ACTIONS.REMOVE_ITEM, payload: { productId } });
    }
  };

  // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
  const updateQuantity = async (productId, quantity) => {
    if (user?.id_NguoiDung) {
      try {
        if (quantity <= 0) {
          await removeFromCart(productId);
        } else {
          await cartAPI.update(productId, quantity);
          dispatch({ type: CART_ACTIONS.UPDATE_QUANTITY, payload: { productId, quantity } });
        }
      } catch (error) {
        console.error('‚ùå L·ªói c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:', error);
        dispatch({ type: CART_ACTIONS.UPDATE_QUANTITY, payload: { productId, quantity } });
      }
    } else {
      dispatch({ type: CART_ACTIONS.UPDATE_QUANTITY, payload: { productId, quantity } });
    }
  };

  // X√≥a to√†n b·ªô gi·ªè h√†ng
  const clearCart = async () => {
    if (user?.id_NguoiDung) {
      try {
        await cartAPI.clear();
      } catch (error) {
        console.error('‚ùå L·ªói x√≥a gi·ªè h√†ng t·ª´ database:', error);
      }
    }
    dispatch({ type: CART_ACTIONS.CLEAR_CART });
  };

  // √Åp d·ª•ng voucher
  const applyVoucher = (voucherData) => {
    dispatch({ type: CART_ACTIONS.SET_VOUCHER, payload: { voucher: voucherData } });
  };

  // X√≥a voucher
  const removeVoucher = () => {
    dispatch({ type: CART_ACTIONS.REMOVE_VOUCHER });
  };

  // ============================================
  // COMPUTED VALUES - Gi√° tr·ªã t√≠nh to√°n
  // ============================================
  
  const totalItems = state.items.reduce((total, item) => 
    total + (item.quantity || item.soLuong || 0), 0);
  
  const totalAmount = state.items.reduce((total, item) => {
    const price = item.giaKhuyenMai || item.gia;
    const quantity = item.quantity || item.soLuong || 0;
    return total + (price * quantity);
  }, 0);
  console.log('CartContext totalAmount:', totalAmount);

  // ============================================
  // HELPER FUNCTIONS - H√†m ti·ªán √≠ch c√¥ng khai
  // ============================================
  
  const isInCart = (productId) => 
    state.items.some(item => item.id_SanPham === productId);

  const getItemQuantity = (productId) => {
    const item = state.items.find(item => item.id_SanPham === productId);
    return item ? (item.quantity || item.soLuong || 0) : 0;
  };

  // Context value ƒë∆∞·ª£c cung c·∫•p cho component con
  const value = {
    // State
    items: state.items,
    cartItems: state.items, // Alias for backward compatibility
    totalItems,
    totalAmount,
    loading: state.loading,
    voucher: state.voucher, // Th√™m voucher v√†o context value
    
    // Actions
    addToCart,
    removeFromCart,
    updateQuantity,
    clearCart,
    applyVoucher,
    removeVoucher,
    
    // Helpers
    isInCart,
    getItemQuantity,
    getTotalItems: () => totalItems,
    getTotalPrice: () => totalAmount
  };

  return (
    <CartContext.Provider value={value}>
      {children}
    </CartContext.Provider>
  );
};

// ============================================
// CUSTOM HOOK - Hook s·ª≠ d·ª•ng Cart Context
// ============================================
export const useCart = () => {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error('useCart ph·∫£i ƒë∆∞·ª£c s·ª≠ d·ª•ng trong CartProvider');
  }
  return context;
};

export { CartContext };
export default CartContext; 